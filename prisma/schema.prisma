// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// schema.prisma
model Message {
  id        String   @id @default(uuid())
  content   String
  senderId  String
  receiverId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  read      Boolean  @default(false)
}

// Existing models remain unchanged
model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String
  address   String
  phone     String?
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  offers    Offer[]
}

model Service {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String?
  defaultPrice Float
  priceType    String        // "FIXED" or "HOURLY"
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  offerServices OfferService[]
}

model Offer {
  id                 String    @id @default(uuid())
  number             String    @unique
  customerId         String
  customer           Customer  @relation(fields: [customerId], references: [id])
  date               DateTime
  status             String
  subtotalAmount     Float
  taxPercentage      Float     @default(19)
  taxAmount          Float
  discountPercentage Float?
  discountAmount     Float?
  totalAmount        Float
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  offerServices      OfferService[]
  invoice            Invoice?
}

model OfferService {
  id          String   @id @default(uuid())
  offerId     String
  offer       Offer    @relation(fields: [offerId], references: [id])
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([offerId, serviceId])
}

model Invoice {
  id              String    @id @default(uuid())
  number          String    @unique
  offerId         String    @unique // One offer can have only one invoice
  offer           Offer     @relation(fields: [offerId], references: [id])
  status          String    // e.g., "PAID", "PENDING", "OVERDUE"
  issueDate       DateTime
  dueDate         DateTime
  paymentDate     DateTime?
  subtotalAmount  Float
  taxPercentage   Float     @default(19)
  taxAmount       Float
  discountAmount  Float?
  totalAmount     Float
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

